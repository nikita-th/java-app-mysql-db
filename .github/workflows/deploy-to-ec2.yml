# Define the CI/CD Workflow for java code
name: CI-CD workflow for java code

# Define permissions required for the OIDC connection
on:
  push:
    branches: [ "feature", "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# Define permissions required for the OIDC connection
permissions:
    id-token: write
    security-events: write
    actions: read
    contents: read
  
# The jobs to be executed in the workfloww
jobs:
  # CI job
  CI:
    runs-on: ubuntu-latest
          
    env:
      MYSQL_HOST_WITH_PORT: ${{ secrets.MYSQL_HOST_WITH_PORT }}
      MYSQL_DB_NAME: ${{ secrets.MYSQL_DB_NAME }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
    steps:
    - name: 'Checkout code'
      uses: 'actions/checkout@v3'

    - name: Build and analyze
      run: |
        mvn clean package

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17

    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=java-code-wine-park -Dsonar.projectName='java-code-wine-park'

    # Check sonarqube quality gate using script to make a GET request to the SonarQube API endpoint and retrieve the status of the quality gate
    - name: Check SonarQube Quality Gate
      run: |
         status=$(curl -s "${{ secrets.SONAR_HOST_URL}}/api/qualitygates/project_status?projectKey=java-code-wine-park" -u "${{ secrets.SONAR_TOKEN }}": | jq -r '.projectStatus.status')
         if [[ "$status" != "OK" ]]; then
         echo "SonarQube quality gate check failed."
         fi
         
    # Build trust between GitHub and AWS using OIDC connector
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
            role-to-assume: ${{ secrets.AWS_IAM_ARN }}
            role-session-name: samplerolesession
            aws-region: ${{ secrets.AWS_REGION }}   
 
    # Authenticate AWS with Docker to interact with an Amazon ECR registry
    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
           
    # Build the Docker image using Dockerfile & tag it with commit SHA, & push it to ECR repository
    - name: Build Docker Image
      run: |
          docker build -t flaskapp:${{ github.sha }} .
          docker tag flaskapp:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}

   # Run Trivy vulnerability scanner on specified Docker image in the ECR repository
    - name: Run Trivy vulnerability scanner
      id: trivy-scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true
      
    # Display boolean value(true/false) depending on the scan report that is received from previous step
    - name: Detected vulnerabilities
      if: steps.trivy-scan.outcome == 'failure'
      run: |
        echo "Vulnerability scan failed!"

    # Display boolean value(true/false) depending on the scan report that is received from previous step
    - name: No vulnerabilities detected
      if: steps.trivy-scan.outcome == 'success'
      run: |
        echo "Vulnerability scan succeeded!"

    # Push Docker image to Amazon ECR
    - name: push docker image
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}

 
  # CD job
  deploy:
     needs: CI  # This ensures that the deployment process only runs when the Docker image has been successfully built and pushed to Amazon ECR
     runs-on: ubuntu-latest

     steps:
       # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2
        
       # Create known_hosts file inside SSH directory 
      - name: Create SSH directory and known_hosts file
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts

      # Add private key to id_rsa
      - name: Extract SSH private key    
        run: echo "${{ secrets.PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
        shell: bash

      # Grant read-write permission to id_rsa 
      - name: Set proper permissions for the private key   # Giving permission to id_rsa 
        run: chmod 600 ~/.ssh/id_rsa

      # Install SSH Client
      - name: Install SSH Client    
        run: sudo apt-get install -y openssh-client
        
      # Build trust between GitHub and AWS using OIDC connector
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ARN }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}
        
      # Pulling image from ECR and deploying on EC2 which contains docker
      - name: Deploy to EC2 with Docker   # In this step we are deploying our application on EC2 instance
        run: |
          ssh-keyscan -H ${{ secrets.INSTANCE_PUBLIC_IP }} >> ~/.ssh/known_hosts
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_PUBLIC_IP }} '
          sudo usermod -aG docker $USER
          newgrp docker
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          sudo docker pull ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}
          sudo docker run -d -p 5000:5000 ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}
          '
